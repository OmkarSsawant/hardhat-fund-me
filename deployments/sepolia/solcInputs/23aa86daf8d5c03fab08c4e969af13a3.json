{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./PriceConvertor.sol\";\r\n\r\nerror NotOwner();\r\n\r\ncontract FundMe{\r\n    using PriceConvertor for uint;\r\n    uint transactionsCount = 0;\r\n    mapping(address => uint) public fundersToAmount;\r\n    address[] public funders;\r\n    uint public constant MIN_USD = 50 * 1e18;\r\n    AggregatorV3Interface public priceFeed;\r\n    /* constant and immutable (can be init only once)  , custom errors are used to save gas , bcz saved in bytecode */\r\n\r\n\r\n    address public immutable i_owner;\r\n    constructor(address feeder){\r\n        //As Constructor is called once so owner will be one whoever deploys the contract\r\n        i_owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(feeder);\r\n        \r\n    }\r\n\r\n    function fund() public payable{\r\n        transactionsCount = transactionsCount +1;\r\n        require(msg.value.getConversionRate(priceFeed) >= MIN_USD,\"Not Sufficient Balance\");\r\n        //if this fails\r\n        //all the code that was executed is reverted \r\n        //i.e, transactionsCount will be again transactionsCount-1\r\n        fundersToAmount[msg.sender] += msg.value;\r\n        funders.push(msg.sender);\r\n    }\r\n\r\n    function withdraw() public onlyOwner{\r\n        for(uint i=0;i<funders.length;i++){\r\n            fundersToAmount[funders[i]] = 0;\r\n        }\r\n        funders = new address[](0);\r\n        /*\r\n        //Three ways to withdraw\r\n        //trasfer\r\n        //send\r\n        //call\r\n        //to make transaction account address should be payable\r\n        // payable(msg.sender).transfer(address(this).balance);//transfers and automatically reverts if fails, has gas limit\r\n\r\n        // bool paySuccess = payable(msg.sender).send(address(this).balance); //transfers and needs manual revert like below , has gas limit\r\n        // require(paySuccess,\"Transaction Failed\");\r\n        */\r\n\r\n        \r\n        (bool success,) = payable(msg.sender).call{value:address(this).balance}(\"\"); //transfers and needs manual revert like below , has gas limit\r\n        require(success,\"Transaction Failed\");\r\n\r\n    }\r\n\r\n\r\n    modifier onlyOwner{\r\n        // require(i_owner == msg.sender,\"Only Owners can withdraw Money\");\r\n        if(msg.sender != i_owner){\r\n            revert NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    receive() external payable{\r\n        //It gets called whenever this contract receives transaction\r\n        //without calling fund , like direct transfer from metamask\r\n        //only that a little more gas is charged\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable{\r\n        //When Data is transfered to contract \r\n        //But there is no one to receive \r\n        //`fallback` is called\r\n        fund();\r\n    }\r\n\r\n\r\n}"
    },
    "contracts/PriceConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n\r\nlibrary PriceConvertor{\r\n\r\n        /*\r\n    - Sepolia Testnet \r\n    - ETH/USD\r\n    - 0x694AA1769357215DE4FAC081bf1f309aDC325306 (Each net can have different aggregator(here)/contract address)\r\n    */\r\n    function getPrice(AggregatorV3Interface priceFeed)internal view returns (uint) {\r\n        (,int price,,,) = priceFeed.latestRoundData(); //ETH in terms of USD\r\n        return uint(price * 10e10); //to match tens of eth as it as 18zeros and price has 8tens\r\n    }\r\n\r\n\r\n    function getConversionRate(uint ethAmount,AggregatorV3Interface priceFeed) internal view returns (uint) {\r\n        uint ethPrice = getPrice(priceFeed);\r\n        uint ethInUsd = (ethPrice * ethAmount) / 1e18; //as both have e18 so zeros become e36\r\n        return ethInUsd; \r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}